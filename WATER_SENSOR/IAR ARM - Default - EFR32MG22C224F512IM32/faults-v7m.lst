                                 - faults-v7m -                       Page    1

    1                           /*********************************************
                                ******************************//**
    2                            * @file
    3                            * @brief Faults
    4                            *********************************************
                                **********************************
    5                            * # License
    6                            * <b>Copyright 2018 Silicon Laboratories Inc.
                                 www.silabs.com</b>
    7                            *********************************************
                                **********************************
    8                            *
    9                            * The licensor of this software is Silicon
                                 Laboratories Inc. Your use of this
   10                            * software is governed by the terms of
                                 Silicon Labs Master Software License
   11                            * Agreement (MSLA) available at
   12                            * www.silabs.com/about-us/legal/master-softwa
                                re-license-agreement. This
   13                            * software is distributed to you in Source
                                 Code format and is governed by the
   14                            * sections of the MSLA applicable to Source
                                 Code.
   15                            *
   16                            *********************************************
                                *********************************/
   17                           
   18                           #include "../compiler/asm.h"
   19                           
   20                                   __IMPORT__ halInternalCrashHandler
   21                                   __IMPORT__ halInternalSysReset
   22                           
   23                           // define the values the link register can
                                 have on entering an exception
   24                           __EQU__(EXC_RETURN_HANDLER_MSP, 0xFFFFFFF1)
   25                           __EQU__(EXC_RETURN_THREAD_MSP,  0xFFFFFFF9)
   26                           __EQU__(EXC_RETURN_THREAD_PSP,  0xFFFFFFFD)
   27                           
   28                           // define stack bytes needed by halCrashHandle
                                r()
   29                           __EQU__(CRASH_STACK_SIZE, 64)
   30                           
   31                           //--------------------------------------------
                                ----------------------------------
   32                           //
   33                           // Various types of crashes generate NMIs,
                                 hard, bus, memory, usage and debug 
   34                           // monitor faults that vector to the routines
                                 defined here. 
   35                           //
   36                           // Although all of these could vector directly
                                 to the common fault handler,
   37                           // each is given its own entry point to allow
                                 setting a breakpoint for a 
   38                           // particular type of crash.
   39                           //
   40                           //--------------------------------------------
                                ----------------------------------
   41                           
   42                           
   43                           #ifndef EMBER_INTERRUPT_TEST
   44                                   __CODE__
   45                                   __THUMB__
   46                                   __EXPORT__ NMI_Handler
   47                           NMI_Handler:
   48    00000000 ........              b.w fault
   49                           #endif
   50                           
   51                           
   52                           #ifndef EMBER_ACCESS_TEST
   53                                   __CODE__
   54                                   __THUMB__
   55                                   __EXPORT__ HardFault_Handler
   56                           HardFault_Handler:
   57    00000000 ........              b.w fault
   58                           
   59                                   __CODE__
   60                                   __THUMB__
                                 - faults-v7m -                       Page    2

   61                                   __EXPORT__ BusFault_Handler
   62                           BusFault_Handler:
   63    00000000 ........              b.w fault
   64                           
   65                           // The Simple MPU integration test takes over
                                 this function, so rename the
   66                           // default handler in that case
   67                           #if defined(REGRESSION_TEST) && defined(INCLUD
                                E_MPU_TEST)
   68                             #define mpu_fault_handler mpu_fault_handler_
                                default
   69                           #endif
   70                           
   71                           // MemManage_Handler is now consumed by the
                                 Simple MPU Driver in emdrv, which
   72                           // will call mpu_fault_handler
   73                                   __CODE__
   74                                   __THUMB__
   75                                   __EXPORT__ mpu_fault_handler
   76                           mpu_fault_handler:
   77    00000000 ........              b.w fault
   78                           
   79                                   __CODE__
   80                                   __THUMB__
   81                                   __EXPORT__ UsageFault_Handler
   82                           UsageFault_Handler:
   83    00000000 ........              b.w fault
   84                           
   85                           #if (__CORTEX_M >= 23U)
   91                           #endif
   92                           
   93                           #endif
   94                           
   95                                   __CODE__
   96                                   __THUMB__
   97                                   __EXPORT__ DebugMon_Handler
   98                           DebugMon_Handler:
   99    00000000 ........              b.w fault
  100                           
  101                                   __CODE__
  102                                   __THUMB__
  103                                   __EXPORT__ uninitializedIsr
  104                           uninitializedIsr:
  105    00000000 ........              b.w fault
  106                           
  107                           
  108                           //--------------------------------------------
                                ----------------------------------
  109                           // Common fault handler prolog processing
  110                           //
  111                           //   determines which of the three possible
                                 EXC_RETURN values is in lr,
  112                           //   then uses lr to save processor registers
                                 r0-r12 to the crash info area
  113                           //
  114                           //   restores lr's value, and then saves lr,
                                 msp and psp to the crash info area
  115                           //
  116                           //   checks the stack pointer to see if it is
                                 valid and won't overwrite the crash
  117                           //   info area - if needed, resets the stack
                                 pointer to the top of the stack
  118                           //   
  119                           //   calls halInternalCrashHandler() to
                                 continue saving crash data. This 
  120                           //   C function can finish crash processing
                                 without risking further faults.
  121                           //   It returns the fault reason, and this is
                                 passed to halInternalSysReset() 
  122                           //   that forces a processor reset.
  123                           //
  124                           //--------------------------------------------
                                ----------------------------------
  125                                   __CODE__
  126                                   __THUMB__
  127                                   __EXPORT__ fault
  128                           fault:
  129    00000000 72B6                  cpsid   i               // in case the
                                 - faults-v7m -                       Page    3

                                                                 fault priority
                                                                 is low
  130    00000002 1EF0080F              tst     lr, #8          // test
                                                      EXC_RETURN for handler vs
                                                      thread mode
  131    00000006 08D0                  beq.n   fault_handler_msp
  132    00000008 1EF0040F              tst     lr, #4          // thread mode:
                                                      test for msp versus
                                                      psp
  133    0000000C 0BD0                  beq.n   fault_thread_msp
  134                           
  135                           fault_thread_psp:
  136    0000000E DFF848E0              ldr     lr, =__BEGIN_RESETINFO__(4)
  137    00000012 AEE8FF1F              stmia.w lr!, {r0-r12}
  138    00000016 1148                  ldr     r0, =EXC_RETURN_THREAD_PSP
  139    00000018 0AE0                  b.n     fault_continue
  140                           
  141                           fault_handler_msp:
  142    0000001A DFF83CE0              ldr     lr, =__BEGIN_RESETINFO__(4)
  143    0000001E AEE8FF1F              stmia.w lr!, {r0-r12}
  144    00000022 0F48                  ldr     r0, =EXC_RETURN_HANDLER_MSP
  145    00000024 04E0                  b.n     fault_continue
  146                           
  147                           fault_thread_msp:
  148    00000026 DFF830E0              ldr     lr, =__BEGIN_RESETINFO__(4)
  149    0000002A AEE8FF1F              stmia.w lr!, {r0-r12}
  150    0000002E 0D48                  ldr     r0, =EXC_RETURN_THREAD_MSP
  151                           //        b.n     fault_continue
  152                           
  153                           fault_continue:
  154    00000030 6946                  mov     r1, sp
  155    00000032 EFF30982              mrs     r2, PSP
  156    00000036 8EE80700              stm     lr, {r0-r2}     // save lr, msp
                                                      and psp
  157    0000003A 8646                  mov     lr, r0          // restore
                                                      lr
  158                           
  159                           fault_check_sp:
  160                                   //  make sure that the current stack
                                 pointer is within the minimum region
  161                                   //  that must be occupied by the stack
                                 and that there is some headroom
  162                                   //  for the crash handler's stack.
  163    0000003C 0A48                  ldr     r0, =__BEGIN_STACK__(CRASH_STAC
                                                     K_SIZE)
  164    0000003E 0B4C                  ldr     r4, =__END_STACK__(0)
  165    00000040 8545                  cmp     sp, r0
  166    00000042 01D3                  blo.n   fault_fix_sp
  167                                   // compare to make sure SP otherwise
                                 looks valid
  168    00000044 A545                  cmp     sp, r4
  169    00000046 01D3                  blo.n   fault_sp_okay
  170                           fault_fix_sp:
  171    00000048 84F30888              msr     msp, r4
  172                           fault_sp_okay:
  173    0000004C ........              bl.w    halInternalCrashHandler //
                                                  saves rest of data, returns
                                                  reason
  174    00000050 84F30888              msr     msp, r4                 // set
                                                       sp to top of stack
                                                       segment
  175    00000054 ........              bl.w    halInternalSysReset     // call
                                                  with reset reason in R0    
                                                  
  176                           
  176.1                                  TABLE
  176.2  00000058 ........              Reference on line 136,142,148
  176.3  0000005C FDFFFFFF              Reference on line 138
  176.4  00000060 F1FFFFFF              Reference on line 144
  176.5  00000064 F9FFFFFF              Reference on line 150
  176.6  00000068 ........              Reference on line 163
  176.7  0000006C ........              Reference on line 164
  177                                   __END__
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 140         #
##############################



